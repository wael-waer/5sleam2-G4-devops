package tn.esprit.spring;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import tn.esprit.spring.DAO.Entities.*;
import tn.esprit.spring.DAO.Repositories.ChambreRepository;
import tn.esprit.spring.DAO.Repositories.EtudiantRepository;
import tn.esprit.spring.DAO.Repositories.ReservationRepository;
import tn.esprit.spring.Services.Reservation.ReservationService;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class ReservationServiceMockitoTest {

    @InjectMocks
    private ReservationService reservationService;

    @Mock
    private ReservationRepository reservationRepository;

    @Mock
    private ChambreRepository chambreRepository;

    @Mock
    private EtudiantRepository etudiantRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testAddOrUpdate() {
        Reservation reservation = new Reservation();
        when(reservationRepository.save(reservation)).thenReturn(reservation);

        Reservation result = reservationService.addOrUpdate(reservation);

        assertNotNull(result);
        verify(reservationRepository, times(1)).save(reservation);
    }

    @Test
    public void testFindAll() {
        List<Reservation> reservations = new ArrayList<>();
        when(reservationRepository.findAll()).thenReturn(reservations);

        List<Reservation> result = reservationService.findAll();

        assertEquals(reservations, result);
        verify(reservationRepository, times(1)).findAll();
    }

    @Test
    public void testFindById() {
        String reservationId = "1";
        Reservation reservation = new Reservation();
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(reservation));

        Reservation result = reservationService.findById(reservationId);

        assertNotNull(result);
        verify(reservationRepository, times(1)).findById(reservationId);
    }

    @Test
    public void testDeleteById() {
        String reservationId = "1";

        reservationService.deleteById(reservationId);

        verify(reservationRepository, times(1)).deleteById(reservationId);
    }

    @Test
    public void testDelete() {
        Reservation reservation = new Reservation();

        reservationService.delete(reservation);

        verify(reservationRepository, times(1)).delete(reservation);
    }

    @Test
    public void testAjouterReservationEtAssignerAChambreEtAEtudiant() {
        Long numChambre = 1L;
        long cin = 123456;
        Bloc bloc = new Bloc();
        bloc.setNomBloc("Bloc A");

        Chambre chambre = new Chambre();
        chambre.setIdChambre(1);
        chambre.setTypeC(TypeChambre.SIMPLE);
        chambre.setBloc(bloc);

        Etudiant etudiant = new Etudiant();
        etudiant.setCin(cin);

        // Mocking the repositories
        when(chambreRepository.findByNumeroChambre(numChambre)).thenReturn(chambre);
        when(etudiantRepository.findByCin(cin)).thenReturn(etudiant);
        when(reservationRepository.save(any(Reservation.class))).thenAnswer(i -> i.getArguments()[0]); // Mocking the save operation to return the reservation

        // Act: Add reservation
        Reservation reservation = reservationService.ajouterReservationEtAssignerAChambreEtAEtudiant(numChambre, cin);

        // Assert: Verify the outcome
        assertNotNull(reservation);
        assertTrue(reservation.isEstValide());

        // Verify interactions with the repositories
        verify(reservationRepository, times(1)).save(reservation);
        verify(chambreRepository, times(1)).save(chambre);
    }



    @Test
    public void testGetReservationParAnneeUniversitaire() {
        LocalDate debutAnnee = LocalDate.now().minusYears(1);
        LocalDate finAnnee = LocalDate.now();
        long expectedCount = 5;
        when(reservationRepository.countByAnneeUniversitaireBetween(debutAnnee, finAnnee)).thenReturn((int) expectedCount);

        long count = reservationService.getReservationParAnneeUniversitaire(debutAnnee, finAnnee);

        assertEquals(expectedCount, count);
        verify(reservationRepository, times(1)).countByAnneeUniversitaireBetween(debutAnnee, finAnnee);
    }

    @Test
    public void testAnnulerReservation() {
        long cinEtudiant = 123456;

        // Create a mock Reservation object
        Reservation reservation = new Reservation();
        reservation.setIdReservation("1");
        reservation.setEstValide(true); // Ensure the reservation is valid for cancellation

        // Mocking the repository to return the reservation for the given CIN
        when(reservationRepository.findByEtudiantsCinAndEstValide(cinEtudiant, true)).thenReturn(reservation);

        // Create a mock Chambre object
        Chambre chambre = new Chambre();
        chambre.setIdChambre(1);

        // Mocking the repository to return the chambre associated with the reservation
        when(chambreRepository.findByReservationsIdReservation(reservation.getIdReservation())).thenReturn(chambre);

        // Act: Call the method to cancel the reservation
        String result = reservationService.annulerReservation(cinEtudiant);

        // Assert: Verify the outcome
        assertEquals("La réservation 1 est annulée avec succès", result);

        // Ensure the reservation is now invalid
        assertFalse(reservation.isEstValide(), "Reservation should be marked as invalid after cancellation");

        // Ensure the reservation was saved (updated) to mark as invalid
        verify(reservationRepository, times(1)).save(reservation);

        // Ensure the chambre was saved after removing the reservation
        verify(chambreRepository, times(1)).save(chambre);

        // Verify the reservation is removed from the chambre's list
        verify(chambreRepository, times(1)).findByReservationsIdReservation(reservation.getIdReservation());
    }


    @Test
    public void testAffectReservationAChambre() {
        String idRes = "1";
        long idChambre = 1;
        Reservation reservation = new Reservation();
        Chambre chambre = new Chambre();

        when(reservationRepository.findById(idRes)).thenReturn(Optional.of(reservation));
        when(chambreRepository.findById(idChambre)).thenReturn(Optional.of(chambre));

        reservationService.affectReservationAChambre(idRes, idChambre);

        assertTrue(chambre.getReservations().contains(reservation));
        verify(chambreRepository, times(1)).save(chambre);
    }



}



